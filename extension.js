var n={d:(e,r)=>{for(var o in r)n.o(r,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:r[o]})},o:(n,e)=>Object.prototype.hasOwnProperty.call(n,e)},e={};function r(n){roamAlphaAPI.deleteBlock({block:{uid:n}})}function o(){let n=new Date(Date.now());return window.roamAlphaAPI.util.dateToPageTitle(n)}function a(n){let e=roamAlphaAPI.util.generateUID();return roamAlphaAPI.data.page.create({page:{title:n,uid:e}}),e}function t(n){return roamAlphaAPI.q(`[:find (pull ?e [:block/uid]) :where [?e :node/title "${n}"]]`)?.[0]?.[0].uid||null}function l(n){let e="todo-progress",l="todo-progress-css-parent";1==n?(function(n,e){let r=t(n)||a(n),l=roamAlphaAPI.util.generateUID(),s=roamAlphaAPI.util.generateUID(),i=roamAlphaAPI.util.generateUID(),d=roamAlphaAPI.util.generateUID();roamAlphaAPI.createBlock({location:{"parent-uid":r,order:0},block:{string:`TODO Progress Bar [[${o()}]]`,uid:e,open:!0,heading:3}}),roamAlphaAPI.createBlock({location:{"parent-uid":e,order:0},block:{string:"TODO Progress Bar v10 [[roam/templates]]",uid:l,open:!0}}),roamAlphaAPI.createBlock({location:{"parent-uid":l,order:0},block:{string:`{{[[roam/render]]:((${i}))}}`,uid:d}}),roamAlphaAPI.createBlock({location:{"parent-uid":e,order:"last"},block:{string:"code",uid:s,open:!1}}),roamAlphaAPI.createBlock({location:{"parent-uid":s,order:0},block:{uid:i,string:'```clojure\n \n(ns progress-bar-v10\n(:require\n    [reagent.core :as r]\n    [datascript.core :as d]\n    [roam.datascript.reactive :as dr]\n    [clojure.pprint :as pp]))\n\n(defn flatten-block \n"Flattens a blocks children into a flat list"\n[acc block]\n(reduce flatten-block\n        (conj acc (dissoc block :block/children))\n        (:block/children block)))\n\n(defn find-child-refs\n"Returns all _refs for children blocks given a parent block uid"\n[block-uid]\n(flatten-block []\n            @(dr/q \'[:find (pull ?e [:block/refs{:block/children ...}]) .\n                    :in $ ?uid\n                    :where\n                    [?e :block/uid ?uid]]\n                    block-uid)))\n\n(defn id-title \n"Gets a page\'s title from its db id"\n[id]\n(:node/title @(dr/pull \'[:node/title] id))\n)\n\n(defn info-from-id [id]\n    (or (:node/title @(dr/pull \'[:node/title] id))\n    (map\n        id-title \n        (map \n                :db/id\n                (:block/refs @(dr/pull \'[:block/refs] id))\n        ))\n    )\n)\n\n(defn count-occurrences \n"Counts the occurances of a string in a list"\n[s slist]\n(->> slist\n        flatten\n        (filter #{s})\n        count))\n\n\n(defn recurse-search\n"Recursivly search through a block\'s children for all pages referenced"\n[block-uid]\n(->> block-uid\n        (find-child-refs)\n        (map :block/refs)\n        (flatten)\n        (map :db/id)\n        (map  info-from-id)\n        (flatten)))\n\n\n(defn main [{:keys [block-uid]} & args]\n(let [tasks (r/atom {;; don\'t love that I do this search twice\n                        :todo (count-occurrences "TODO" (recurse-search block-uid))\n                        :done (count-occurrences "DONE" (recurse-search block-uid))} )]\n    \n    [:div\n            [:div {:style {:display "flex"\n                                :align-items "center"}\n                        }\n                    [:span [:progress {\n                    :id "file"\n                    :name "percent-done"\n                    :value (:done @tasks)\n                    :max (+ (:todo @tasks) (:done @tasks))\n                    :style{\n\n                            :margin-left "10px"\n                            :margin-right "10px"\n                            }}]\n                    ]\n                    [:span [:div  (str (:done @tasks)  "/"\n                                    (+ \n                                        (:done @tasks)\n                                        (:todo @tasks))\n                                    " Done"\n                                    )]]\n\n                    ]\n            ]\n)); \n                 ```'}})}("roam/render",e),function(n){let e=t("roam/css")||a("roam/css"),r=roamAlphaAPI.util.generateUID();roamAlphaAPI.createBlock({location:{"parent-uid":e,order:"last"},block:{string:`TODO PROGRESS BAR STYLE [[${o()}]]`,uid:n,open:!1,heading:3}}),roamAlphaAPI.createBlock({location:{"parent-uid":n,order:0},block:{uid:r,string:'```css\n \n:root{\n    --progress-bar-default:#137cbd;\n    --progress-bar:#137cbd;\n    --progress-border:#B6B6B6;\n    --progress-bg:#dfe2e5;\n}\n:root .rm-dark-theme {\n    --progress-border:#137cbd;\n    --progress-bg:#EFEFEF;\n}\n    \nprogress[name="percent-done"],\n.todo-progress-bar progress{\n    display:inline-block;\n    height:6px;\n    background:none;\n    border-radius: 15px;\n    margin-bottom:2px;\n}\n    \nprogress::-webkit-progress-bar,\n.todo-progress-bar progress::-webkit-progress-bar{\n    height:6px;\n    background-color: var(--progress-bg);\n    border-radius: 15px;\n}\n\n.rm-dark-theme progress::-webkit-progress-bar,\n.rm-dark-theme .todo-progress-bar progress::-webkit-progress-bar{\n  box-shadow:0px 0px 6px var(--progress-border) inset;\n}\n\nprogress::-webkit-progress-value,\n.todo-progress-bar progress::-webkit-progress-value{\n    display:inline-block;\n    float:left;\n    height:6px;\n    margin:0px -10px 0 0;\n    background: var(--progress-bar);\n    border-radius: 5px;\n}\n     ```'}})}(l)):0==n&&(r(e),r(l))}n.d(e,{Z:()=>s});const s={onload:function({extensionAPI:n}){roamAlphaAPI.data.pull("[*]",[":block/uid","todo-progress"])||l(!0),console.log("load example plugin")},onunload:function(){console.log("unload example plugin"),l(!1)}};var i=e.Z;export{i as default};